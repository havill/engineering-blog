<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rakuten Engineering Blog</title><link>https://engineering.rakuten.today/</link><description>Recent content on Rakuten Engineering Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://engineering.rakuten.today/index.xml" rel="self" type="application/rss+xml"/><item><title>Elm at Rakuten</title><link>https://engineering.rakuten.today/post/elm-at-rakuten/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://engineering.rakuten.today/post/elm-at-rakuten/</guid><description>In our team at Rakuten, we have been using Elm1 in production for almost two years now. This post is about our story, the lessons we learned, and our likes and dislikes.
This post is quite long so if you prefer to see an overview, feel free to jump to the index.
Everything started in the Berlin branch of Rakuten during the summer of 2017. We were maintaining a medium-size single-page application written in Vanilla JavaScript when things started going out of control.</description></item><item><title>Zero-Downtime Rolling Deployments in Kubernetes</title><link>https://engineering.rakuten.today/post/graceful-k8s-delpoyments/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://engineering.rakuten.today/post/graceful-k8s-delpoyments/</guid><description>Photo by Kammeran Gonzalez-Keola used under Pexels License
At Rakuten, we generally use Kubernetes to run our services. Kubernetes enables us to operate robust systems at scale. However, Kubernetes is not perfect and in edge cases it may behave in unexpected ways. For example, during rolling deployments we expect no request failures &amp;mdash; a reasonable expectation, right? But when we ran functional tests during a deployment we noticed some requests failing &amp;mdash; to our surprise.</description></item><item><title>Introducing AltSwiftUI in Rakuten Travel</title><link>https://engineering.rakuten.today/post/altswiftui-travel/</link><pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate><guid>https://engineering.rakuten.today/post/altswiftui-travel/</guid><description>Background image by Dan Roizer under the Unsplash license
SwiftUI is a framework introduced by Apple in 2019 for development in a multitude of Apple platforms, including iOS. It allows developers to create apps with declarative UI programming and state management. Because of this, it&amp;rsquo;s possible to improve development speed and quality. Yet, the framework requires iOS 13 and onwards versions. On top of that, new additions to the framework will require an even higher minimum iOS version.</description></item></channel></rss>